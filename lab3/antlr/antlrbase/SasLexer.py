# Generated from Sas.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2-")
        buf.write("\u011c\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t")
        buf.write("\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17")
        buf.write("\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3&\3&\3&\7&\u00d5\n&\f&\16&\u00d8")
        buf.write("\13&\3\'\3\'\3(\3(\3)\3)\3)\3)\5)\u00e2\n)\3)\3)\3)\5")
        buf.write(")\u00e7\n)\3*\3*\3*\3+\3+\3,\3,\3,\7,\u00f1\n,\f,\16,")
        buf.write("\u00f4\13,\5,\u00f6\n,\3-\3-\5-\u00fa\n-\3-\3-\3.\3.\3")
        buf.write(".\3.\7.\u0102\n.\f.\16.\u0105\13.\3.\3.\3.\3.\3/\3/\3")
        buf.write("/\3/\7/\u010f\n/\f/\16/\u0112\13/\3/\3/\3/\3/\3/\3\60")
        buf.write("\3\60\3\60\3\60\4\u0103\u0110\2\61\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M\2O\2Q(S)U*W\2Y\2[+]")
        buf.write(",_-\3\2\7\4\2C\\c|\3\2\62;\4\2GGgg\4\2--//\5\2\13\f\17")
        buf.write("\17\"\"\2\u0120\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2")
        buf.write("\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5")
        buf.write("d\3\2\2\2\7f\3\2\2\2\tl\3\2\2\2\13n\3\2\2\2\rq\3\2\2\2")
        buf.write("\17s\3\2\2\2\21u\3\2\2\2\23w\3\2\2\2\25y\3\2\2\2\27{\3")
        buf.write("\2\2\2\31}\3\2\2\2\33\177\3\2\2\2\35\u0081\3\2\2\2\37")
        buf.write("\u0083\3\2\2\2!\u0085\3\2\2\2#\u0087\3\2\2\2%\u008a\3")
        buf.write("\2\2\2\'\u008d\3\2\2\2)\u0091\3\2\2\2+\u0095\3\2\2\2-")
        buf.write("\u0098\3\2\2\2/\u009a\3\2\2\2\61\u009d\3\2\2\2\63\u009f")
        buf.write("\3\2\2\2\65\u00a2\3\2\2\2\67\u00a4\3\2\2\29\u00a9\3\2")
        buf.write("\2\2;\u00af\3\2\2\2=\u00b3\3\2\2\2?\u00bb\3\2\2\2A\u00c0")
        buf.write("\3\2\2\2C\u00c3\3\2\2\2E\u00c5\3\2\2\2G\u00c8\3\2\2\2")
        buf.write("I\u00ca\3\2\2\2K\u00d1\3\2\2\2M\u00d9\3\2\2\2O\u00db\3")
        buf.write("\2\2\2Q\u00e6\3\2\2\2S\u00e8\3\2\2\2U\u00eb\3\2\2\2W\u00f5")
        buf.write("\3\2\2\2Y\u00f7\3\2\2\2[\u00fd\3\2\2\2]\u010a\3\2\2\2")
        buf.write("_\u0118\3\2\2\2ab\7t\2\2bc\7B\2\2c\4\3\2\2\2de\7=\2\2")
        buf.write("e\6\3\2\2\2fg\7e\2\2gh\7p\2\2hi\7u\2\2ij\7v\2\2jk\7B\2")
        buf.write("\2k\b\3\2\2\2lm\7?\2\2m\n\3\2\2\2no\7h\2\2op\7B\2\2p\f")
        buf.write("\3\2\2\2qr\7*\2\2r\16\3\2\2\2st\7+\2\2t\20\3\2\2\2uv\7")
        buf.write("}\2\2v\22\3\2\2\2wx\7\177\2\2x\24\3\2\2\2yz\7~\2\2z\26")
        buf.write("\3\2\2\2{|\7`\2\2|\30\3\2\2\2}~\7-\2\2~\32\3\2\2\2\177")
        buf.write("\u0080\7/\2\2\u0080\34\3\2\2\2\u0081\u0082\7,\2\2\u0082")
        buf.write("\36\3\2\2\2\u0083\u0084\7\61\2\2\u0084 \3\2\2\2\u0085")
        buf.write("\u0086\7\'\2\2\u0086\"\3\2\2\2\u0087\u0088\7?\2\2\u0088")
        buf.write("\u0089\7?\2\2\u0089$\3\2\2\2\u008a\u008b\7#\2\2\u008b")
        buf.write("\u008c\7?\2\2\u008c&\3\2\2\2\u008d\u008e\7c\2\2\u008e")
        buf.write("\u008f\7p\2\2\u008f\u0090\7f\2\2\u0090(\3\2\2\2\u0091")
        buf.write("\u0092\7z\2\2\u0092\u0093\7q\2\2\u0093\u0094\7t\2\2\u0094")
        buf.write("*\3\2\2\2\u0095\u0096\7q\2\2\u0096\u0097\7t\2\2\u0097")
        buf.write(",\3\2\2\2\u0098\u0099\7>\2\2\u0099.\3\2\2\2\u009a\u009b")
        buf.write("\7>\2\2\u009b\u009c\7?\2\2\u009c\60\3\2\2\2\u009d\u009e")
        buf.write("\7@\2\2\u009e\62\3\2\2\2\u009f\u00a0\7@\2\2\u00a0\u00a1")
        buf.write("\7?\2\2\u00a1\64\3\2\2\2\u00a2\u00a3\7.\2\2\u00a3\66\3")
        buf.write("\2\2\2\u00a4\u00a5\7v\2\2\u00a5\u00a6\7t\2\2\u00a6\u00a7")
        buf.write("\7w\2\2\u00a7\u00a8\7g\2\2\u00a88\3\2\2\2\u00a9\u00aa")
        buf.write("\7h\2\2\u00aa\u00ab\7c\2\2\u00ab\u00ac\7n\2\2\u00ac\u00ad")
        buf.write("\7u\2\2\u00ad\u00ae\7g\2\2\u00ae:\3\2\2\2\u00af\u00b0")
        buf.write("\7k\2\2\u00b0\u00b1\7h\2\2\u00b1\u00b2\7B\2\2\u00b2<\3")
        buf.write("\2\2\2\u00b3\u00b4\7k\2\2\u00b4\u00b5\7h\2\2\u00b5\u00b6")
        buf.write("\7g\2\2\u00b6\u00b7\7n\2\2\u00b7\u00b8\7u\2\2\u00b8\u00b9")
        buf.write("\7g\2\2\u00b9\u00ba\7B\2\2\u00ba>\3\2\2\2\u00bb\u00bc")
        buf.write("\7h\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be\7t\2\2\u00be\u00bf")
        buf.write("\7B\2\2\u00bf@\3\2\2\2\u00c0\u00c1\7>\2\2\u00c1\u00c2")
        buf.write("\7/\2\2\u00c2B\3\2\2\2\u00c3\u00c4\7]\2\2\u00c4D\3\2\2")
        buf.write("\2\u00c5\u00c6\7\60\2\2\u00c6\u00c7\7\60\2\2\u00c7F\3")
        buf.write("\2\2\2\u00c8\u00c9\7_\2\2\u00c9H\3\2\2\2\u00ca\u00cb\7")
        buf.write("y\2\2\u00cb\u00cc\7j\2\2\u00cc\u00cd\7k\2\2\u00cd\u00ce")
        buf.write("\7n\2\2\u00ce\u00cf\7g\2\2\u00cf\u00d0\7B\2\2\u00d0J\3")
        buf.write("\2\2\2\u00d1\u00d6\5M\'\2\u00d2\u00d5\5M\'\2\u00d3\u00d5")
        buf.write("\5O(\2\u00d4\u00d2\3\2\2\2\u00d4\u00d3\3\2\2\2\u00d5\u00d8")
        buf.write("\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7")
        buf.write("L\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9\u00da\t\2\2\2\u00da")
        buf.write("N\3\2\2\2\u00db\u00dc\t\3\2\2\u00dcP\3\2\2\2\u00dd\u00de")
        buf.write("\5W,\2\u00de\u00df\7\60\2\2\u00df\u00e1\5W,\2\u00e0\u00e2")
        buf.write("\5Y-\2\u00e1\u00e0\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e7")
        buf.write("\3\2\2\2\u00e3\u00e4\5W,\2\u00e4\u00e5\5Y-\2\u00e5\u00e7")
        buf.write("\3\2\2\2\u00e6\u00dd\3\2\2\2\u00e6\u00e3\3\2\2\2\u00e7")
        buf.write("R\3\2\2\2\u00e8\u00e9\5W,\2\u00e9\u00ea\7N\2\2\u00eaT")
        buf.write("\3\2\2\2\u00eb\u00ec\5W,\2\u00ecV\3\2\2\2\u00ed\u00f6")
        buf.write("\7\62\2\2\u00ee\u00f2\4\63;\2\u00ef\u00f1\4\62;\2\u00f0")
        buf.write("\u00ef\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3\2\2\2")
        buf.write("\u00f2\u00f3\3\2\2\2\u00f3\u00f6\3\2\2\2\u00f4\u00f2\3")
        buf.write("\2\2\2\u00f5\u00ed\3\2\2\2\u00f5\u00ee\3\2\2\2\u00f6X")
        buf.write("\3\2\2\2\u00f7\u00f9\t\4\2\2\u00f8\u00fa\t\5\2\2\u00f9")
        buf.write("\u00f8\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb\3\2\2\2")
        buf.write("\u00fb\u00fc\5W,\2\u00fcZ\3\2\2\2\u00fd\u00fe\7\61\2\2")
        buf.write("\u00fe\u00ff\7\61\2\2\u00ff\u0103\3\2\2\2\u0100\u0102")
        buf.write("\13\2\2\2\u0101\u0100\3\2\2\2\u0102\u0105\3\2\2\2\u0103")
        buf.write("\u0104\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u0106\3\2\2\2")
        buf.write("\u0105\u0103\3\2\2\2\u0106\u0107\7\f\2\2\u0107\u0108\3")
        buf.write("\2\2\2\u0108\u0109\b.\2\2\u0109\\\3\2\2\2\u010a\u010b")
        buf.write("\7\61\2\2\u010b\u010c\7,\2\2\u010c\u0110\3\2\2\2\u010d")
        buf.write("\u010f\13\2\2\2\u010e\u010d\3\2\2\2\u010f\u0112\3\2\2")
        buf.write("\2\u0110\u0111\3\2\2\2\u0110\u010e\3\2\2\2\u0111\u0113")
        buf.write("\3\2\2\2\u0112\u0110\3\2\2\2\u0113\u0114\7,\2\2\u0114")
        buf.write("\u0115\7\61\2\2\u0115\u0116\3\2\2\2\u0116\u0117\b/\2\2")
        buf.write("\u0117^\3\2\2\2\u0118\u0119\t\6\2\2\u0119\u011a\3\2\2")
        buf.write("\2\u011a\u011b\b\60\2\2\u011b`\3\2\2\2\f\2\u00d4\u00d6")
        buf.write("\u00e1\u00e6\u00f2\u00f5\u00f9\u0103\u0110\3\b\2\2")
        return buf.getvalue()


class SasLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    ID = 37
    DOUBLE = 38
    LONG = 39
    INT = 40
    LINE_COMMENT = 41
    COMMENT = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'r@'", "';'", "'cnst@'", "'='", "'f@'", "'('", "')'", "'{'", 
            "'}'", "'|'", "'^'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'and'", "'xor'", "'or'", "'<'", "'<='", "'>'", "'>='", 
            "','", "'true'", "'false'", "'if@'", "'ifelse@'", "'for@'", 
            "'<-'", "'['", "'..'", "']'", "'while@'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "DOUBLE", "LONG", "INT", "LINE_COMMENT", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "ID", "LETTER", "DIGIT", 
                  "DOUBLE", "LONG", "INT", "INT_DIGITS", "EXP", "LINE_COMMENT", 
                  "COMMENT", "WS" ]

    grammarFileName = "Sas.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


